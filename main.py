import telebot
import config
import parcer_hse_descripton
import universal_parcer_for_directions
from telebot import types


bot = telebot.TeleBot(config.token)


@bot.message_handler(commands=['start'])
def welcome(message):
    stick_in = open('stick_in.webp', 'rb')
    bot.send_sticker(message.chat.id, stick_in)

    # keyboard

    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    item1 = types.KeyboardButton("–°–º–æ—Ç—Ä–µ—Ç—å –ø—Ä–æ–≥—Ä–∞–º–º—ã –æ–±—É—á–µ–Ω–∏—è")
    item2 = types.KeyboardButton("–ú–µ–Ω—è –Ω–µ –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏–µ")
    markup.add(item1, item2)

    if message.from_user.last_name == None:
        mess = f'–ü—Ä–∏–≤–µ—Ç, {message.from_user.first_name}! –•–æ—á–µ—à—å –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –æ–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã?'
    else:
        mess = f'–ü—Ä–∏–≤–µ—Ç, {message.from_user.first_name} {message.from_user.last_name}! –•–æ—á–µ—à—å –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å ' \
               f'–æ–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã?'
    bot.send_message(message.chat.id, mess, reply_markup=markup)


@bot.message_handler(content_types=['text'])
def processing(message):
    angry_tyan = open('angry_tyan.webp', 'rb')
    sad_tyan = open('sad_tyan.webp', 'rb')
    interest_girl = open('interest_girl.webp', 'rb')
    if message.chat.type == 'private':
        if message.text == '–°–º–æ—Ç—Ä–µ—Ç—å –ø—Ä–æ–≥—Ä–∞–º–º—ã –æ–±—É—á–µ–Ω–∏—è':
            markup = types.InlineKeyboardMarkup(row_width=2)
            for hse_dir in parcer_hse_descripton.all_directions_with_urls:
                item = types.InlineKeyboardButton(f'{str(hse_dir)}',
                                                  callback_data=parcer_hse_descripton.all_directions_with_urls[
                                                      hse_dir])
                markup.add(item)
            bot.send_sticker(message.chat.id, interest_girl)
            bot.send_message(message.chat.id, '–í—ã–±–∏—Ä–∞–π –ø—Ä–æ–≥—Ä–∞–º–º—É, –∫–æ—Ç–æ—Ä–∞—è —Ç–µ–±—è –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç, –∏ –∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É!üòâ',
                             reply_markup=markup)

        elif message.text == '–ú–µ–Ω—è –Ω–µ –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏–µ':
            bot.send_sticker(message.chat.id, sad_tyan)
            bot.send_message(message.chat.id, "–ë–æ—Ç—É –≥—Ä—É—Å—Ç–Ω–æ... –î–∞–≤–∞–π –ª—É—á—à–µ –≤—Å–µ-—Ç–∞–∫–∏ –≤—ã–±–∏—Ä–∞—Ç—å –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–ª—è —É—á–µ–±—ã")
        else:
            bot.send_message(message.chat.id, "–¢—ã –≤—Ç–∏—Ä–∞–µ—à—å –º–Ω–µ –∫–∞–∫—É—é-—Ç–æ –¥–∏—á—å")
            bot.send_sticker(message.chat.id, angry_tyan)


@bot.callback_query_handler(func=lambda call: True)
def callback_inline(call):
    try:
        if call.message:
            for hse_dir_urls in parcer_hse_descripton.all_directions_with_urls:
                if call.data == parcer_hse_descripton.all_directions_with_urls[hse_dir_urls]:
                    url = parcer_hse_descripton.all_directions_with_urls[hse_dir_urls]
                    print(url)
                    local = universal_parcer_for_directions.Parse(url)
                    bot.send_message(call.message.chat.id, local.parcing())

            # remove inline buttons
            bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id,
                                  text="–í—ã–±–∏—Ä–∞–π –ø—Ä–æ–≥—Ä–∞–º–º—É, –∫–æ—Ç–æ—Ä–∞—è —Ç–µ–±—è –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç, –∏ –∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É!üòâ",
                                  reply_markup=None)

    except Exception as e:
        print(repr(e))


bot.polling(none_stop=True)
